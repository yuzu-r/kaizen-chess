

<div class="panel panel-default col-xs-10 col-xs-offset-1">
  <div class="panel-heading">
    <h4 class="panel-title" id="game-status-panel-title"><%= @game.name %></h4>
  </div>
  <div class="panel-body">
		<h4 id="firebase-turn"></h4>
		<h4 id="firebase-checkalert"></h4>  
  </div>
</div>
<div class="clearfix"></div>

<h3 class="checkalert" style="display:none;"></h3> 
<br>
<div class="chess_board_container">
	<table class="chess_board_table">
		
		<% for position_y in 8.downto(1) %>
			<% 
				if position_y % 2 == 0
					dark_square = false
				else
					dark_square = true
				end
			%>
			<tr>
			<% for position_x in 1..8 %>
				<% 
					if dark_square == true
						color_class = "dark_square"
						dark_square = false
					else
						color_class = "light_square"
						dark_square = true
					end
				%>
				<td>
					<div data-position-x=<%= position_x %> data-position-y=<%= position_y %> class="board_square <%= color_class %>">
						<% is_piece = @game.pieces.where(position_x: position_x, position_y: position_y).first %>
						<% if is_piece %>
								<div id="piece-<%=is_piece.id %>" class="piece" data-piece-id=<%=is_piece.id %> data-position-x=<%= is_piece.position_x %> data-position-y=<%= is_piece.position_y %> ></div>	
						<% end %>
						
					</div>
				</td>	
			<% end %>
			</tr>	
		<% end %>

	</table>

	<table class="x_axis_labels">
		<tr>
			<% 
				arr_x_labels = {
					1 => 'a',
					2 => 'b',
					3 => 'c',
					4 => 'd',
					5 => 'e',
					6 => 'f',
					7 => 'g',
					8 => 'h'
				}
			%>	
			<% for i in 1..8 %>
				<td><div class="label_square"><%= arr_x_labels[i] %></div></td>
			<% end %>

		</tr>
	</table>

	<table class="y_axis_labels">
		<% for i in 8.downto(1) %>
			<tr>
				<td><div class="label_square"><%= i %></div></td>
			</tr>
		<% end %>
		
	</table>

</div> <!-- close chess_board_container div -->
<br><br><br>

<div class="whitepromotion" style="display: none;" >
<h2 class="text-center">You can promote your pawn</h2>
	<div class="container">
    <div class="text-center">
			<div class="btn btn-default choosepiece" data-piece-type="Rook">♖</div>
			<div class="btn btn-default choosepiece" data-piece-type="Knight">♘</div>
			<div class="btn btn-default choosepiece" data-piece-type="Bishop">♗</div>
			<div class="btn btn-default choosepiece" data-piece-type="Queen">♕</div>
		</div>
	</div>
</div>

<div class="blackpromotion" style="display: none;">
<h2 class="text-center">You can promote your pawn</h2>
	<div class="container">
    <div class="text-center">
			<div class="btn btn-default choosepiece" data-piece-type="Rook">♜</div>
			<div class="btn btn-default choosepiece" data-piece-type="Knight">♞</div>
			<div class="btn btn-default choosepiece" data-piece-type="Bishop">♝</div>
			<div class="btn btn-default choosepiece" data-piece-type="Queen">♛</div> 
		</div>
	</div>
</div>

<h1>White Player</h1>
<p><%= @game.white_player.email %></p>
<br />
<br />
<h1>Black Player</h1>
<% if @game.black_player == nil && @game.white_player_id != current_user.id %>
	<button class="btn btn-primary" id="join-game">Join Game</button>
<% elsif @game.black_player != nil %>
	<p><%= @game.black_player.email %></p>
<% end %>
<br />
<br />

<% if @game.active_player_id == current_user.id %>
  <button class="btn btn-danger" id="forfeit-game">Forfeit Game</button>
<% end %>

<script>
  function firebaseStart(){
    var firebaseURL = "/games/" + '<%=@game.id%>' + "/get_firebase_info";
    $.ajax({
      type: 'GET', 
      url: firebaseURL,
      dataType: 'json',
      success: function(response) {
        console.log('firebase info: ' + response.config);
        firebase.initializeApp(response.config);
        var dbRef = firebase.database().ref();
        var gamesRef = dbRef.child('games'); 
        var gameRef = gamesRef.child('<%= @game.firebase_game_id %>');
        var whitePlayerId = <%= @game.white_player_id %>;

        gameRef.on('value', function(dataSnapshot) { 
          var gameData = dataSnapshot.val(); 
          console.log(gameData);
          if (gameData) {
            if (gameData.active_player_id == '<%= current_user.id %>') {
              $('#firebase-turn').text('It is your turn.');  
            }
            else if (gameData.active_player_id) {
              if (gameData.active_player_id == whitePlayerId) {
                $('#firebase-turn').text('White\'s Move');  
              }
              else if (gameData.active_player_id !== "") {
                $('#firebase-turn').text('Black\'s Move');    
              }
              else { 
                $('#firebase-turn').text('');   
              }
            }
            
            $('#game-status-panel-title').text(gameData.status_message);
            $('#firebase-checkalert').text(gameData.check_message);

            console.log('calling drawPieces from listener');
            drawPieces();
            console.log('calling updateActivePlayer from listener');
            updateActivePlayer();
          }  
          else {
            console.log('listening for changes, cant find game- gameRef ' + gameRef);
          }
        });
          },
      error: function (data) {
        console.log('did not get firebase info!');
      }
    });
  }

  function firebaseStop(){
    var dbRef = firebase.database().ref();
    var gamesRef = dbRef.child('games'); 
    var gameRef = gamesRef.child('<%= @game.firebase_game_id %>');
    console.log('turning off the listener: ' + gameRef);
    gameRef.off();
  }

	var pieceCodes = {
		white: 
		{
			'pawn': '&#9817;',
		 	'rook': '&#9814;',
		 	'knight': '&#9816;',
		 	'bishop': '&#9815;',
		 	'queen': '&#9813;',
		 	'king': '&#9812;'
		},
		black: 
		{
			'pawn': '&#9823;',
		 	'rook': '&#9820;',
		 	'knight': '&#9822;',
		 	'bishop': '&#9821;',
		 	'queen': '&#9819;',
		 	'king': '&#9818;'
		}
	}
	
	function drawPieces(){
		$.ajax({
      type: 'GET', 
      url: '<%= get_pieces_path(@game) %>',
      dataType: 'json',
      success: function(pieces) {
        $.each(pieces, function(index, piece){
        	if( isPieceOnBoard(piece.position_x, piece.position_y) ){
        		var pieceColor;	
						if (piece.player_id == <%= @game.white_player_id %>){
							pieceColor = 'white';
						}
						else{
							pieceColor = 'black'
						}
						
						// get rid of old piece
						$('.piece[data-piece-id=' + piece.id + ']').empty();

						clonedPiece = $('<div class="piece"></div>'); 
						clonedPiece.attr('data-piece-id', piece.id);
						clonedPiece.attr('data-piece-color', pieceColor);
						clonedPiece.attr('data-piece-position-x', piece.position_x);
						clonedPiece.attr('data-piece-position-y', piece.position_y);
						clonedPiece.addClass(pieceColor);
						clonedPiece.html(pieceCodes[pieceColor][piece.type.toLowerCase()]);
						$('.board_square[data-position-x='+ piece.position_x + '][data-position-y=' + piece.position_y + ']').html(clonedPiece);
        	}
          else {
            //console.log('piece is not on board!' + piece.id);
            $('.piece[data-piece-id=' + piece.id + ']').empty();
          }
				});
        console.log('calling updateActivePlayer from drawPieces');
        updateActivePlayer();
      }, error: function (data) {
        console.log('Chess pieces failed to load!');
      }
    });
	}

	function isPieceOnBoard(x,y){
		return ( x > 0 && x <= 8 && y > 0 && y <= 8 );
	}

	function isEmptyBoardSquare(x,y){
		if( $('.board_square[data-position-x='+ x + '][data-position-y=' + y + ']').find('.piece').length > 0 ){
			return true;
		}
		else{
			return false;
		}
	}

	function gameStatus(){
		var checkAlert = $('.checkalert')
    console.log('starting gameStatus');
		$.ajax({
      type: 'GET', 
      url: '<%= status_game_path(@game) %>',
      dataType: 'json',
      success: function(data) {
      	if (data.is_in_check === true) {
          if (data.is_in_checkmate === true) {
            var winningColor = "";
            if (data.color_in_checkmate === "Black") {
              var winningColor = "White";
            }
            else {
              var winningColor = "Black";
            }
            checkAlert.css("display", "block");
            var checkMessage = data.color_in_checkmate + ' (' + data.player_in_checkmate + ') is in checkmate.<br/>' + winningColor + ' wins!'
            checkAlert.html(checkMessage);
          }
          else {
          console.log(data)
      		checkAlert.css("display", "block");
      		var checkMessage = data.current_color_in_check + ' (' + data.current_player_in_check + ') in check';
      		checkAlert.html(checkMessage);
      	}
      }
      	else {
      		checkAlert.css("display", "none");
      	}
      }, error: function (data) {
        console.log('Status failed to load!');
      }
    });
	}

	$(document).ready(function(){
    firebaseStart();
		drawPieces();
		gameStatus();
		$('.dark_square').droppable({drop: dropPiece});
		$('.light_square').droppable({drop: dropPiece});
		updateActivePlayer();
	});

  $(window).unload(function() {
    console.log('I am unloading!');
    firebaseStop();  // stop listening for this game
  })

	$('.piece').on('drag',(function(){
		$(this).css('color', 'blue');
	}));

	$('.piece').on('dragstop', function() {
		$(this).css('color', 'black');
	} );

	$('#join-game').on('click', function(){
		joinGame(<%=@game.id %>);
	})

	function joinGame(gameId) {
		var joinUrl = "/games/" + gameId + "/join";
		var data = {_method: 'PATCH'};
		$.post(joinUrl, data)
			.done(function(data){
				console.log('successfully joined!');
        console.log('calling drawPieces and updateActivePlayer from joinGame');
        drawPieces();
        updateActivePlayer();  
        $('#join-game').hide();
			})
			.fail(function(xhr, textStatus, errorThrown) {
				console.log('failed to join!');
				console.log(xhr.statusText);
				console.log(textStatus);
				console.log(errorThrown);
			});
	}

  $('#forfeit-game').on('click', function() {
  forfeitGame(<%=@game.id %>);
  })

  function forfeitGame(gameId) {
    var forfeitUrl = "/games/" + <%=@game.id %> + "/forfeit";
    var data = {_method: 'PATCH'};
    $.post(forfeitUrl, data)
      .done(function(data){
        console.log('forfeited game!');
        console.log(data);
      })
      .fail(function(xhr, testStatus, errorThrown) {
        console.log('failed to forfeit');
        console.log(xhr.statusText);
        console.log(textStatus);
        console.log(errorThrown);
      });
  }

  function promotePawn(pieceId){
    var choosePiece = $('.choosepiece');
    choosePiece.click(function(event){
    var pieceType = $(event.target).data('piece-type');
      var data = {type:pieceType, _method: 'PATCH'};
      var pieceUrl = "/games/" + <%=@game.id%> + "/pieces/" + pieceId + "/promote"; 
      $.post(pieceUrl, data
        ).success(function(data){
          $('.whitepromotion').css("display", "none");
          $('.blackpromotion').css("display", "none");
          console.log('successful promotion, redraw pieces');
          drawPieces();
          updateActivePlayer();
        });
    });   
  }
  
  function updateActivePlayer(){
    $.ajax({
      type: 'GET', 
      url: '<%= get_active_player_path(@game) %>',
      dataType: 'json',
      success: function(active_player_id) {
        var current_user_id = <%= current_user.id %>;
        var white_player_id = '<%= @game.white_player_id %>';
        if(current_user_id == active_player_id){
          if( active_player_id == white_player_id ){
            $('.white').draggable({disabled: false});
          }
          else{
            $('.black').draggable({disabled: false});
          }
        }

        else{
          $('.piece').draggable({ disabled: true });
        }
      }, error: function (data) {
        console.log('Failed to get active player!');
        }     
    });
  }

	function dropPiece(event, ui) {
		var dest_x = $(this).data('position-x');
		var dest_y = $(this).data('position-y');
		var piece = ui.draggable;
		moveSelectedPiece(piece.data('piece-id'), dest_x, dest_y, piece);
    drawPieces();	
	}

	function moveSelectedPiece(pieceId, dest_x, dest_y, selectedPiece){
    console.log("selectedPiece dataset: " + selectedPiece[0].dataset.positionX + 'and y: ' + selectedPiece[0].dataset.positionY);
    console.log(selectedPiece[0].attributes);
    var selectedX = selectedPiece.data('piece-position-x');
    var selectedY = selectedPiece.data('piece-position-y');
		var castleMove;
		if ((selectedPiece.html().indexOf('♔') === 0 || selectedPiece.html().indexOf('♚') === 0) && Math.abs(selectedPiece[0].dataset.positionX - dest_x) == 2 && selectedPiece[0].dataset.positionY == dest_y){
			castleMove = true;
		}
		else {
			castleMove = false;
		}

		var enPassante;

		if ( (selectedPiece.html().indexOf('♙') === 0 || selectedPiece.html().indexOf('♟') === 0) && $('.board_square[data-position-x='+ dest_x + '][data-position-y=' + dest_y + ']').children().length < 1 && Math.abs(selectedX - dest_x) == 1 && Math.abs(selectedY - dest_y) == 1  ){
			enPassante = true;
		}
		else {
			enPassante = false;
		}

		var promotion; 
		if (selectedPiece.html().indexOf('♙') === 0 && dest_y === 8) {
			promotion = true;
		}
		else if (selectedPiece.html().indexOf('♟') === 0 && dest_y === 1) {
			promotion = true;
		}
		else {
			promotion = false;
		}

    var data = {position_x: dest_x, position_y: dest_y, _method: 'PATCH'};
    var pieceUrl = "/games/" + <%=@game.id%> + "/pieces/" + pieceId + "/move"; 

		$.post(pieceUrl, data
			).success(function(data){
				// move piece on screen - clone the piece and update the pos-x and pos-y values
				if (data.success){

					if (castleMove) {
						if (dest_x == 7) {
							selectedRook = $('.board_square[data-position-x="8"][data-position-y=' + dest_y + ']').children();
							$('.board_square[data-position-x="8"][data-position-y=' + dest_y + ']').empty();
							selectedRook.attr('data-position-x', 6);
							$('.board_square[data-position-x="6"][data-position-y=' + dest_y + ']').html(selectedRook[0])
						}
						else {
							selectedRook = $('.board_square[data-position-x="1"][data-position-y=' + dest_y + ']').children();
							$('.board_square[data-position-x="1"][data-position-y=' + dest_y + ']').empty();
							selectedRook.attr('data-position-x', 4);
							$('.board_square[data-position-x="4"][data-position-y=' + dest_y + ']').html(selectedRook[0])
						}
					}

					if (enPassante) {
						if (dest_y == 6) {
							$('.board_square[data-position-x='+ dest_x +'][data-position-y="5"]').empty();
						}
						else {
							$('.board_square[data-position-x='+ dest_x +'][data-position-y="4"]').empty();
						}
					}

					if (promotion) {
            console.log('promoting!');
						if (selectedPiece.html().indexOf('♙') === 0 ) {
							$('.whitepromotion').css("display", "block");
              //$('.white').draggable({disabled: true});
							promotePawn(pieceId);
						}
						else {
							$('.blackpromotion').css("display", "block");
              //$('.black').draggable({disabled: true});
						 	promotePawn(pieceId);
						}
					}

					gameStatus();
					
	        console.log('We have movement!');
          console.log('calling updateActivePlayer from within moveSelectedPiece'); 
          updateActivePlayer();  
        }
	      else{
	      	$('.piece').draggable({revert: true});
					console.log('Invalid move!');
				}
			}).fail(function(data) {
		    console.log('failed move!');
	  });
		selectedPiece.css("color", "black");
	} 

</script>